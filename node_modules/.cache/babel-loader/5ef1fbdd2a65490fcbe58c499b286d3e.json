{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kotaoshida/Desktop/Project/saunalog/cliant/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kotaoshida/Desktop/Project/saunalog/cliant/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{makeStyles}from'@material-ui/core/styles';import Button from'@material-ui/core/Button';import{CompassCalibrationOutlined}from'@material-ui/icons';import{jsx as _jsx}from\"react/jsx-runtime\";var google=window.google;var useStyles=makeStyles(function(theme){return{root:{'& > *':{margin:theme.spacing(1)}}};});export default function ContainedButtons(props){var classes=useStyles();function getNearSauna(_x){return _getNearSauna.apply(this,arguments);}function _getNearSauna(){_getNearSauna=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var lat,lng;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.geolocation.getCurrentPosition(function(res){lat=res.coords.latitude;lng=res.coords.longitude;var map;var service;console.log(lat);console.log(lng);var pyrmont=new google.maps.LatLng(lat,lng);var request={location:pyrmont,radius:'500',keyword:\"サウナ\"};map=new google.maps.Map(document.getElementById('map'));service=new google.maps.places.PlacesService(map);function callback(results,status){if(status==google.maps.places.PlacesServiceStatus.OK){props.setsauna(results[0].name);}else{props.setsauna(\"近くにサウナが見つかりませんでした。\");}}service.nearbySearch(request,callback);});case 2:case\"end\":return _context.stop();}}},_callee);}));return _getNearSauna.apply(this,arguments);};return/*#__PURE__*/_jsx(\"div\",{className:classes.root,children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:getNearSauna,children:\"\\u4ECA\\u3044\\u308B\\u30B5\\u30A6\\u30CA\"})});}","map":{"version":3,"sources":["/Users/kotaoshida/Desktop/Project/saunalog/cliant/src/components/helper/dialog/place/place.jsx"],"names":["React","makeStyles","Button","CompassCalibrationOutlined","google","window","useStyles","theme","root","margin","spacing","ContainedButtons","props","classes","getNearSauna","e","navigator","geolocation","getCurrentPosition","res","lat","coords","latitude","lng","longitude","map","service","console","log","pyrmont","maps","LatLng","request","location","radius","keyword","Map","document","getElementById","places","PlacesService","callback","results","status","PlacesServiceStatus","OK","setsauna","name","nearbySearch"],"mappings":"6UAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,UAAT,KAA2B,0BAA3B,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,OAASC,0BAAT,KAA2C,oBAA3C,C,2CAEA,GAAMC,CAAAA,MAAM,CAAGC,MAAM,CAACD,MAAtB,CAEA,GAAME,CAAAA,SAAS,CAAGL,UAAU,CAAC,SAACM,KAAD,QAAY,CACvCC,IAAI,CAAE,CACJ,QAAS,CACPC,MAAM,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADD,CADL,CADiC,CAAZ,EAAD,CAA5B,CAQA,cAAgB,SAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiC,CAC/C,GAAMC,CAAAA,OAAO,CAAGP,SAAS,EAAzB,CAD+C,QAGjCQ,CAAAA,YAHiC,gJAGhD,iBAA4BC,CAA5B,oJAGSC,CAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,SAACC,GAAD,CAAO,CACpDC,GAAG,CAACD,GAAG,CAACE,MAAJ,CAAWC,QAAf,CACAC,GAAG,CAACJ,GAAG,CAACE,MAAJ,CAAWG,SAAf,CACA,GAAIC,CAAAA,GAAJ,CACA,GAAIC,CAAAA,OAAJ,CACAC,OAAO,CAACC,GAAR,CAAYR,GAAZ,EACAO,OAAO,CAACC,GAAR,CAAYL,GAAZ,EACA,GAAMM,CAAAA,OAAO,CAAG,GAAIzB,CAAAA,MAAM,CAAC0B,IAAP,CAAYC,MAAhB,CAAuBX,GAAvB,CAA2BG,GAA3B,CAAhB,CACA,GAAMS,CAAAA,OAAO,CAAE,CACbC,QAAQ,CAACJ,OADI,CAEbK,MAAM,CAAE,KAFK,CAGbC,OAAO,CAAC,KAHK,CAAf,CAKAV,GAAG,CAAG,GAAIrB,CAAAA,MAAM,CAAC0B,IAAP,CAAYM,GAAhB,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAApB,CAAN,CACAZ,OAAO,CAAG,GAAItB,CAAAA,MAAM,CAAC0B,IAAP,CAAYS,MAAZ,CAAmBC,aAAvB,CAAqCf,GAArC,CAAV,CACA,QAASgB,CAAAA,QAAT,CAAkBC,OAAlB,CAA2BC,MAA3B,CAAmC,CAC/B,GAAIA,MAAM,EAAIvC,MAAM,CAAC0B,IAAP,CAAYS,MAAZ,CAAmBK,mBAAnB,CAAuCC,EAArD,CAAyD,CACrDjC,KAAK,CAACkC,QAAN,CAAeJ,OAAO,CAAC,CAAD,CAAP,CAAWK,IAA1B,EAAgC,CADpC,IACwC,CAACnC,KAAK,CAACkC,QAAN,CAAe,oBAAf,EAAqC,CAE/E,CACHpB,OAAO,CAACsB,YAAR,CAAqBhB,OAArB,CAA6BS,QAA7B,EACL,CArBS,CAHT,uDAHgD,+CA8B5C,CAIH,mBACE,YAAK,SAAS,CAAE5B,OAAO,CAACL,IAAxB,uBAEE,KAAC,MAAD,EAAQ,OAAO,CAAC,WAAhB,CAA4B,KAAK,CAAC,SAAlC,CAA4C,OAAO,CAAEM,YAArD,kDAFF,EADF,CASD","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { CompassCalibrationOutlined } from '@material-ui/icons';\n\nconst google = window.google;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default  function ContainedButtons(props) {\n  const classes = useStyles();\n  \n async function getNearSauna(e){\n    let lat;\n    let lng\n    await navigator.geolocation.getCurrentPosition((res)=>{\n      lat=res.coords.latitude\n      lng=res.coords.longitude\n      let map;\n      let service;\n      console.log(lat)\n      console.log(lng)\n      const pyrmont = new google.maps.LatLng(lat,lng);\n      const request ={\n        location:pyrmont,\n        radius: '500',\n        keyword:\"サウナ\"\n      }\n      map = new google.maps.Map(document.getElementById('map'))\n      service = new google.maps.places.PlacesService(map);\n      function callback(results, status) {\n          if (status == google.maps.places.PlacesServiceStatus.OK) {\n              props.setsauna(results[0].name)}else{props.setsauna(\"近くにサウナが見つかりませんでした。\")}\n          \n        }\n      service.nearbySearch(request,callback)\n})\n\n\n    };\n\n\n\n  return (\n    <div className={classes.root}>\n      \n      <Button variant=\"contained\" color=\"primary\" onClick={getNearSauna}>\n         今いるサウナ\n      </Button>\n      \n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}