"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const chalk_1 = __importDefault(require("chalk"));
const logger = __importStar(require("./logger"));
const messageFormat = (obj1, obj2) => {
    return `"${obj1.name}@${obj1.version}" <- "${obj2.name}@${obj2.version}"`;
};
const validate = (data) => {
    const result = {
        includeWarning: false,
        includeError: false,
    };
    data.warning.forEach(warningPkg => {
        warningPkg.dependencies.forEach(relation => {
            relation.usingPackages.map(used => {
                logger.info(chalk_1.default.yellow("Warning") +
                    " " +
                    messageFormat({ name: warningPkg.name, version: relation.realUsedVersion }, { name: used.name, version: used.version }));
                if (!result.includeWarning) {
                    result.includeWarning = true;
                }
            });
        });
    });
    if (result.includeWarning) {
        logger.info("");
        logger.info(chalk_1.default.bgYellow(chalk_1.default.black(" Warning ")) + ` ${data.warning.length} packages contains multiple versions.`);
        logger.info("");
    }
    data.errors.forEach(errorPkg => {
        errorPkg.dependencies.forEach(relation => {
            relation.usingPackages.map(used => {
                logger.info(chalk_1.default.red("Error") +
                    " " +
                    messageFormat({ name: errorPkg.name, version: relation.realUsedVersion }, { name: used.name, version: used.version }));
                if (!result.includeError) {
                    result.includeError = true;
                }
            });
        });
    });
    if (result.includeError) {
        logger.info("");
        logger.info(chalk_1.default.bgRed(chalk_1.default.black(" Failed ")) + ` ${data.errors.length} packages contains multiple versions.`);
        logger.info("");
        process.exit(1);
    }
    logger.info(chalk_1.default.green("Success"));
};
exports.validate = validate;
