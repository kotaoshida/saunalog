"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parser_1 = require("../parser");
const utils_1 = require("../utils");
exports.generateUsed = ({ name, version }, obj) => {
    return Object.entries(obj).reduce((used, [packageName, value]) => {
        // dependenciesに指定したバージョンのライブラリが含まれているかどうか
        const hasDependency = Object.entries(value.dependencies || {}).find(([depName, depVersion]) => depName === name && depVersion === version);
        if (hasDependency) {
            used.push(parser_1.parseConcatNameAndVersionString(packageName));
        }
        return used;
    }, []);
};
exports.generateDisplayPackageData = (obj, isTargetCallback, isIgnoreTarget) => {
    const packageNameList = [];
    const dataSet = Object.entries(obj).map(([key, value]) => {
        const purePackageData = parser_1.parseConcatNameAndVersionString(key);
        const isTarget = isTargetCallback(purePackageData.name);
        const isIgnore = isIgnoreTarget(purePackageData.name);
        const isCheckLibrary = isIgnore ? false : isTarget;
        const usingPackages = isCheckLibrary ? exports.generateUsed(purePackageData, obj) : [];
        packageNameList.push(purePackageData.name);
        return {
            ...purePackageData,
            realVersion: value.version,
            usingPackages,
            ignore: !isCheckLibrary,
            rootLibrary: isCheckLibrary ? usingPackages.length === 0 : "unknown",
        };
    });
    const installedPackage = utils_1.uniq(packageNameList).reduce((structure, packageName) => {
        dataSet
            .filter(data => data.name === packageName)
            .forEach(item => {
            const newDisplayPackageData = {
                [item.version]: {
                    realUsedVersion: item.realVersion,
                    usingPackages: item.usingPackages,
                },
            };
            structure[packageName] = {
                ...(structure[packageName] || {}),
                ...newDisplayPackageData,
            };
        });
        return structure;
    }, {});
    return {
        installedPackage,
    };
};
